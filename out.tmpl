package {{ .PackageName }}

{{ range $struct := .Structs }}

  {{if $.Insert}}const insert{{$struct.Name}} = `INSERT INTO {{.TableName}} ({{.Insert.Fields}}) VALUES ({{.Insert.PlaceHolders}})`{{end}}

  {{if $.Update}}const update{{$struct.Name}} = `UPDATE {{.TableName}} SET {{.Update.Setters}} WHERE `{{end}}

  {{if $.Join}}const join{{$struct.Name}} = `{{.Join.Fields}}`{{end}}

  type Null{{$struct.Name}} struct {
  {{range $field := $struct.Fields}}
    {{$field.Name}} *{{SanitizeType $field.Type}} {{ if $field.Tags }} {{$field.Tags}} {{ end }}{{end}}
  }

  func (n *Null{{$struct.Name}}) Valid() bool {
  {{range $field := $struct.Fields}}
    if n.{{$field.Name}} != nil {
      return true
    }{{end}}

    return false
  }

  func (n *Null{{$struct.Name}}) Get() *{{$struct.Name}} {
    if !n.Valid() {
      return nil
    }

    return &{{$struct.Name}}{ {{range $field := .Fields}}
    {{ if not (Contains $field.Type "*") }}{{$field.Name}}: *n.{{$field.Name}},{{else}}{{$field.Name}}: n.{{$field.Name}},{{end}}{{end}}
    }
  }

  func (n *Null{{$struct.Name}}) MarshalJSON() ([]byte, error) {
    if !n.Valid() {
      return []byte("null"), nil
    }

    return json.Marshal(n.Get())
  }

{{ end }}
