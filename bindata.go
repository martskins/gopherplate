// Code generated by go-bindata.
// sources:
// out.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x5f\x4f\xdb\x3e\x14\x7d\xcf\xa7\xb8\x54\xe8\xa7\x24\xe2\xe7\xbe\x23\xf1\x80\xb6\x6e\x14\x6d\x05\x91\xc0\x1e\xa6\x49\xb8\xc9\x6d\x6a\x30\x76\x66\xdf\x6c\x63\x96\xbf\xfb\xe4\xfc\x29\x25\x64\x52\xd7\x27\xc7\xf7\xf8\x9c\x73\xcf\xe9\x3c\x8d\x52\xc8\xb7\xc2\xc2\x46\x48\x84\x9f\xdc\x02\x6f\x48\xff\x5f\xa1\x42\xc3\x09\x4b\x58\x3f\x83\xfd\x2e\x2b\x54\xbf\x20\xde\x12\xd5\xf6\x74\x3e\xaf\x04\x6d\x9b\x35\x2b\xf4\xd3\xfc\x89\x1b\xb2\x8f\x42\xd9\x79\xa5\xeb\x2d\x9a\x5a\x72\xc2\x84\x45\x29\x2c\x09\x84\x05\x5e\xfe\x10\x96\xaf\x25\x02\x69\x78\x44\xac\x81\x76\x6a\x8d\x2a\xb6\x5c\x55\x58\xb2\x28\x9d\x47\x51\xcd\x8b\x47\x5e\x21\x38\x07\xec\xba\x3b\xaf\xf8\x13\x82\xf7\x51\xe4\x1c\x98\x00\x85\x63\x4b\xa6\x29\x08\x4e\xcf\x80\x65\xed\xd1\xb6\x00\x00\xe7\xc4\x06\x8e\xd9\x52\x59\x34\xe4\x7d\xa1\x95\x25\x10\xed\x97\x73\xfd\x33\x16\x08\xbd\x87\x33\xb8\x5f\xae\xb2\xc5\x4d\x0e\xcb\x55\x7e\x05\xce\xb1\x3c\x78\xec\xa7\xb1\x73\x3d\x0d\xfb\x20\x50\x96\xd6\xfb\x04\xee\xce\x3f\xdd\x2e\xb2\xfd\xd9\xb5\xe4\x05\x5e\x68\x59\xa2\x09\x88\x7b\xe7\x50\x95\xaf\xbc\xdc\xd6\x25\x27\x1c\xbc\x34\xed\xd7\x94\x97\xdb\xeb\xf7\xe7\xf9\x62\x6c\x23\x5b\xe4\xe1\xaa\x23\x61\x19\x12\xb5\x42\xf0\xe5\x62\x71\xb3\x80\x09\xb9\x4b\x2d\xd4\x20\xf6\xa0\x85\x9a\x92\x72\xae\x85\xed\x16\xdb\xa7\xa1\xe7\x1a\x61\xd5\x48\xf9\xe6\x61\x1f\xba\x6b\xb5\xfa\x22\x36\x81\x21\xf4\x30\x60\x07\xca\x08\x20\xc0\x3a\xc0\xc0\x90\x3a\x97\x71\x25\x48\xfc\xc6\x3c\xc8\xf4\xd3\x70\xf6\x3e\x54\x1e\x36\xe8\xef\x78\x15\x3a\x7d\xa1\x08\x17\x1d\x08\x55\x09\xde\x0f\x96\x01\x5a\xdb\x9b\x46\x15\x10\x2b\x48\xa7\xac\x27\x70\xc7\xa5\x28\xe3\x04\xd6\x5a\xcb\x7f\xd9\x40\x6c\x40\xb1\xf1\x1a\x47\x67\xa0\x44\x47\x13\x7e\x06\xa9\x31\x0a\xc8\x34\xd8\xde\xf8\xbd\x34\x77\xd3\x0d\x97\x16\x0f\x34\xfb\x11\x29\x4e\x42\x58\xa3\x02\xdc\x60\xe9\x48\xb1\x61\xa1\x91\x09\x25\x64\xe7\xe1\x95\xf8\x7f\x63\x2a\x37\xb1\xff\xb8\xba\x76\x77\x4d\x10\xbf\xd3\x8a\xb8\x50\x76\xbf\x2e\x98\xa5\xb3\xa4\x6d\xe1\x55\x34\xa7\x90\xbe\x89\xeb\xc4\x39\x94\x16\x27\xb0\x93\xd0\x90\xdc\x4b\xb7\x61\x93\xc3\x42\xfb\xcc\x8d\xdd\x72\x79\x99\x5d\xad\xe2\x04\xe2\xaf\xdf\xd6\xcf\x84\x27\x80\xc6\x68\x93\x1c\x12\x5d\xf7\x22\x9e\xa9\x46\xca\x59\x72\xf2\x97\x28\x1f\xac\x56\xac\xd7\x8a\x15\x6b\xab\x4a\x3a\x8b\xbb\xbf\x66\xf4\x27\x00\x00\xff\xff\x79\x3b\x7d\x26\x51\x05\x00\x00")

func outTmplBytes() ([]byte, error) {
	return bindataRead(
		_outTmpl,
		"out.tmpl",
	)
}

func outTmpl() (*asset, error) {
	bytes, err := outTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out.tmpl", size: 1361, mode: os.FileMode(420), modTime: time.Unix(1553800994, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out.tmpl": outTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"out.tmpl": &bintree{outTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

