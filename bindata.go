// Code generated by go-bindata.
// sources:
// out.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x4d\x6f\xdb\x46\x10\xbd\xeb\x57\xbc\x18\x41\x41\x0a\x2a\xd9\x5e\x03\xe8\x10\x34\x6a\xe2\xa0\x55\x8c\x48\x4e\x0f\x45\x01\xaf\xc4\xa1\xb8\xf1\x6a\x57\xd9\x1d\xd6\x76\x37\xfc\xef\xc5\x2e\x29\x9b\xa6\xe9\xd8\x68\x51\xf4\x46\xec\xcc\xbc\x79\xf3\xe6\x83\xf9\x74\x32\xc5\xba\x92\x0e\xa5\x54\x84\x2b\xe1\x20\x6a\x36\xdf\xef\x48\x93\x15\x4c\x05\x36\x37\x70\x5f\xd4\x8e\xf4\x35\x92\x8a\xf9\xe0\x5e\xe5\xf9\x4e\x72\x55\x6f\xb2\xad\xd9\xe7\x7b\x61\xd9\x5d\x4a\xed\xf2\x9d\x39\x54\x64\x0f\x4a\x30\xa5\xd9\x64\x8a\x53\x86\x74\x10\xc5\x9f\xd2\x89\x8d\x22\xb0\xc1\x25\xd1\x01\x7c\x9b\xad\xd6\xdb\x4a\xe8\x1d\x15\xd9\x64\x9a\x4f\x26\x07\xb1\xbd\x14\x3b\x82\xf7\xc8\xce\xda\xef\xa5\xd8\x13\x9a\x66\x32\xf1\x1e\x36\xb8\xe2\xa5\x63\x5b\x6f\x19\xaf\xe6\xc8\x56\xf1\xd3\x45\x07\x84\x30\x59\xe2\x65\xb6\xaa\x4c\xad\x8a\xc5\xf5\xc1\x58\x0e\x26\x00\xc8\x73\x9c\x6a\x47\x96\xbd\xef\x00\xb2\x00\xdd\x34\x81\x22\x57\x14\x4a\x84\x63\xc1\xb4\x27\xcd\x81\xaa\x8c\xee\x10\x18\x46\x44\x3c\xef\x63\xaa\x16\xb3\x69\xb6\x46\x3b\x7e\x2c\xc3\x1c\x17\xa7\xcb\xd5\xe2\xe3\x1a\xa7\xcb\xf5\x07\x78\x9f\xad\x83\x1e\x9d\x35\xf1\xbe\x83\xc9\x7e\x96\xa4\x0a\xd7\x34\x29\x3e\xbd\xfe\xe5\x7c\xb1\xea\xdb\xce\x94\xd8\xd2\x3b\xa3\x0a\xb2\xc1\xe3\xc2\x7b\xd2\xc5\x5d\x71\xe7\x87\x42\x30\x3d\xbb\xb8\x3a\xba\x3f\x51\x5c\x8b\x79\x2c\xee\x91\x0c\x73\x5c\x9c\x9f\xbd\x79\xbd\x5e\x0c\xeb\x5a\x2d\xd6\xe1\xa9\x0d\xcb\x56\xc4\x1c\x99\xe3\xb7\x77\x8b\x8f\x0b\x0c\xf9\xbf\x37\x52\x3f\x9b\xfd\x67\x23\x35\x9c\xd9\x13\x38\x0e\xd6\x95\xe4\x2a\x7a\x3e\x40\x88\xf6\x7e\x4d\x21\xcf\xb1\xa2\xd1\x9c\xf3\x40\x2d\xba\xdd\xb6\xa3\xc7\xd5\x7b\x90\x72\x84\x6f\x4d\x81\xfc\x9f\xa6\x60\xb4\x6b\xf5\x7f\xd7\xb5\x11\x45\x3f\xff\x33\x45\x75\xd1\x6d\x70\x9e\x63\x59\x2b\x35\x36\x08\x02\xba\x56\x2a\xb6\x7b\x68\x9e\x61\x6f\x1c\xab\x1b\xd4\x8e\xca\x5a\xa1\x34\x16\x8a\xca\x96\x8e\x9b\x00\x7c\x73\xa0\x71\xe0\xee\x96\xf8\x48\xa4\xbb\x2f\x65\x20\x19\xce\xcb\xd1\xf7\xc8\xba\xab\xba\x75\x38\x22\x4c\xbd\x5f\x09\x2d\x59\xfe\x45\xeb\x90\xa6\xb3\x86\xef\xa6\x39\x9e\xa4\xee\x4d\xec\xc2\xa9\xba\x83\x08\x0f\xad\x53\x2b\xc1\x9d\x2a\x47\x35\x3e\x09\x25\x0b\x48\x5d\xc8\xad\x60\x72\xb8\xaa\x88\x2b\xb2\x61\xd8\x2d\xb5\xb2\x3c\x14\x4b\xb7\x17\x76\xac\xe0\x09\x50\xd6\x7a\x8b\x44\x63\x3a\x66\x4f\xdb\x8c\x49\x8a\x8d\x31\xea\xbe\x2e\x52\x17\x74\x3d\xfb\x86\x3e\x5d\xb5\x42\x17\x48\xe8\x4b\x17\x80\x1f\x52\x24\x3b\x46\xa2\x48\x0f\x22\x52\xfc\x98\x06\x3d\x64\x09\x9d\x0d\x75\x7d\x31\x87\x96\x0a\x5f\xbf\xde\xee\x9c\x2c\xd1\x43\x7d\x2a\xd0\x8f\xc7\x25\x6f\x68\x3b\xca\x25\x32\x79\x1e\xda\x8e\xef\xb1\x78\x8a\x7b\x6c\x2d\xfa\x9b\x03\x58\xe2\xda\x6a\xb0\xad\xdb\xeb\x14\xfb\x7d\xfb\x5c\x0a\xe5\xa8\x37\x05\x6f\x89\x3b\x93\x1b\x3f\x73\xff\xae\xe5\x6f\x89\x93\x34\x0c\xf2\x00\xd5\x47\x4e\xb2\xc4\x0b\x9d\x1d\xc7\xc2\xdf\x2f\x40\x4b\x35\xc2\xff\xbb\x21\x94\x1f\xd9\xae\xe1\x5a\xc5\x6e\x1a\x46\xf2\x93\xd1\x2c\xa4\x76\xfd\x55\xc2\xc9\xf4\x24\x8d\x1b\x72\x4f\xe9\x57\x98\x3e\x50\x7f\xe6\x7d\x68\xd4\x88\xef\xa8\x6b\x68\x4a\xbf\x37\xfd\xed\xfb\x55\x58\x57\x09\xf5\x7e\xf5\x61\x89\x7d\xfb\x1d\x36\x6e\xf4\x92\x84\xdf\x92\x33\xfa\x69\xb5\x7b\xa0\x49\x8a\xe4\xf7\x3f\x36\x37\x4c\x33\x90\xb5\xc6\xa6\xcf\xd1\xbc\x8d\x48\x4e\xc2\x3d\x3c\x49\x67\x8f\xf4\x20\x90\xc9\xba\x5c\x89\xce\x62\x8f\xd3\xb6\xb6\xbb\x93\xfb\x77\x00\x00\x00\xff\xff\xf5\x78\x15\xfd\xfd\x09\x00\x00")

func outTmplBytes() ([]byte, error) {
	return bindataRead(
		_outTmpl,
		"out.tmpl",
	)
}

func outTmpl() (*asset, error) {
	bytes, err := outTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out.tmpl", size: 2557, mode: os.FileMode(420), modTime: time.Unix(1557939588, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out.tmpl": outTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"out.tmpl": &bintree{outTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

