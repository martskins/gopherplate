// Code generated by go-bindata.
// sources:
// out.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6e\xdb\x3c\x10\xdd\xfb\x14\x13\x23\xf8\x20\x19\x06\x0f\x10\xc0\x8b\xe0\xab\xda\x38\x68\x1d\x23\x92\xd3\x45\x51\x20\xb4\x35\x72\x99\xb2\x23\x83\xa4\x16\xe9\x80\x77\x2f\x48\x49\x8e\xad\xa8\x80\xeb\x15\xc5\x79\x7c\xf3\x7e\x7c\x90\xbb\x9f\x72\x8f\xc0\x0c\x62\xdd\x9e\x57\xf2\x17\x82\xf7\x93\x09\x33\x18\x49\x7b\x84\x6b\xeb\x4c\xb3\x73\x70\xb3\x00\x91\xc7\xa3\x8d\x00\x00\x66\x55\xc1\xb5\x58\x92\x45\xe3\xbc\xdf\xd5\x64\x1d\xa8\xf8\xc5\xdc\x3d\x13\x81\xd0\x7b\x58\xc0\xf3\x72\x95\x67\x8f\x05\x2c\x57\xc5\x03\x30\x8b\x42\x6e\x35\x76\xd3\x84\xb9\xa3\x11\x1f\x15\xea\xd2\x7a\x9f\xc2\xd3\xed\xe7\x4d\x96\x9f\xce\xd6\x5a\xee\xf0\xae\xd6\x25\x9a\x80\x78\x66\x46\x2a\xcf\xb4\x6c\x0e\xa5\x74\xd8\x6b\x69\xe2\xd7\x98\x96\xcd\xfa\xc3\x6d\x91\x0d\x65\xe4\x59\x11\xae\x5a\x12\x91\xa3\x73\x71\x11\x7c\xbd\xcb\x1e\x33\x18\x59\x77\x5f\x2b\xea\x97\xbd\xd4\x8a\xc6\x56\x31\x47\xd8\xd1\xd8\x29\x8d\x7b\x3d\x20\xac\x1a\xad\xdf\x3d\xec\x42\xe7\xb8\xab\x2b\xa2\x0a\x0c\xa1\x87\x1e\xdb\x53\x4e\x00\x02\xac\x05\xf4\x0c\x33\xe6\x5c\x92\x72\xea\x37\x16\x61\x4d\x37\x0d\x67\xef\x43\xe5\xc1\x41\x77\x27\xf7\xa1\xd3\x37\x8a\x70\xd1\x82\x90\x4a\xf0\xbe\x97\x0c\x10\x65\x57\x0d\xed\x20\x21\x98\x8d\x49\x4f\xe1\x49\x6a\x55\x26\x29\x6c\xeb\x5a\xff\x8b\x03\x55\x01\x89\xa1\x8d\xab\x05\x90\x6a\x69\xc2\xcf\xa0\x6b\x0c\x81\x33\x0d\xc6\x1b\x7f\x92\xe6\x71\x5a\x49\x6d\xf1\x42\xb1\x9f\xd0\x25\x69\x08\x6b\x50\x00\xf7\x92\xae\x48\xf4\x86\x06\x22\x48\xe9\x56\xc3\xd9\xf2\xff\x86\x54\x3c\xe2\x7f\x58\x5d\xf4\x5e\x3b\x48\xfe\xaf\xc9\x49\x45\xf6\xb4\x2e\x98\xce\xa6\x69\x6c\xe1\x2c\x9a\x1b\x98\xbd\x8b\x6b\xce\x8c\xda\xe2\x08\x76\x14\x1a\x92\x7b\xeb\x36\x38\xb9\x2c\xb4\x2f\xd2\xd8\x1f\x52\xdf\xe7\x0f\xab\x24\x85\xe4\xdb\xf7\xed\xab\xc3\x39\xa0\x31\xb5\x49\x2f\x89\xae\x7d\x91\x4c\xa9\xd1\x7a\x9a\xce\xff\x12\xe5\x8b\xad\x49\x74\xbb\x12\x12\xb1\xaa\xb4\x95\x78\xfc\x6b\x4e\xfe\x04\x00\x00\xff\xff\x7e\x20\x37\x88\xc5\x04\x00\x00")

func outTmplBytes() ([]byte, error) {
	return bindataRead(
		_outTmpl,
		"out.tmpl",
	)
}

func outTmpl() (*asset, error) {
	bytes, err := outTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out.tmpl", size: 1221, mode: os.FileMode(420), modTime: time.Unix(1553516870, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out.tmpl": outTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"out.tmpl": &bintree{outTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

